zc = optimizing(model, hessian = T, data = dat); zc$par
zc = optimizing(model, hessian = T, data = dat); zc$par
u = zc$par[paste0("u[", 1:576, "]")]
u
u0 = zc$par[paste0("u[", 1:576, "]")]
data = within(data, g = g1[index, ])
data = within(data, { g = g1[index, ] })
z0 = zc
data = within(data, { g = g1[index, ] })
z1 = optimizing(model, hessian = T, data = dat)
z1 = optimizing(model, hessian = T, data = dat)
u1 = z1$par[paste0("u[", 1:576, "]")]
u0
u1
cor(u0, u1)
cor(cbind(mdata$AD1, u0, u1))
cor(cbind(ad = mdata$AD1, u0, u1))
cor(mdata$AD1, u0)
cor(mdata$AD1, u0)^2
summary(glm.fit$P - glmm.fit$P)
head(u0)
head(mdata$AD1)
head(u0, n = 10)
head(mdata$AD1, n = 10)
load("./Manu/model.rdt")
setwd("~/Dropbox/GitHub/Adsp")
load("./Manu/model.rdt")
u = model$optimizing$par
head(u)
u = u[paste0("u[", 1:576, "]")]
head(u, n = 10)
head(u0, n = 10)
cor(u0, u)
hist(u)
pheno = data$pheno
pheno$random = u
head(pheno)
str(pheno)
pheno = data$pheno
str(pheno)
load("./Manu/data.rdt")
pheno = data$pheno
pheno$random = u
head(pheno)
options(stringsAsFactors = F)
meta_extra <- read.xlsx("./docs/adsp_subject_and_experiment_metadata.xlsx", startRow = 2, sheetIndex = 1)
library(xlsx)
meta_extra <- read.xlsx("./docs/adsp_subject_and_experiment_metadata.xlsx", startRow = 2, sheetIndex = 1)
pheno$Ethnicity <- meta_extra$Ethnicity[match(pheno$SRR, meta_extra$SRR)]
pheno$Ethnicity[pheno$Ethnicity == "0"] = "Not-Latino"
pheno$Ethnicity[pheno$Ethnicity == "1"] = "Latino"
pheno$Ethnicity[pheno$Ethnicity == "null"] = "Null"
pheno$Race[pheno$Race == "4"] = "Black"
pheno$Race[pheno$Race == "5"] = "White"
pheno$Race[pheno$Race == "6"] = "Other"
pheno$Race[pheno$Race == "null"] = "Null"
pheno$Race = factor(pheno$Race, levels = c("Black", "White", "Other", "Null"))
mycol <- c("grey10", "dodgerblue3", "firebrick1", "chartreuse3")
ggplot(pheno, aes(x = random, y = Family.ID)) +
geom_line() + geom_point(aes(color = Race, shape = Ethnicity)) +
theme_bw() + xlab("Random Effect") + ylab("Family ID") +
scale_color_manual(values = mycol) +
theme(panel.border = element_blank(),
axis.line = element_line(size = 1),
axis.text = element_text(size = 7),
axis.title= element_text(size = 15),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
legend.key = element_blank())
library(clusterGeneration)
N0 = 3
Sigma = genPositiveDefMat("eigen",dim = N0, lambdaLow = 0.1)$Sigma
Sigma
chol(Sigma)
chol(4 * Sigma)
chol(Sigma) * 2
model <- stan_model("./Stan/glmm_test.stan")
setwd("~/Dropbox/GitHub/glmm")
model <- stan_model("./Stan/glmm_test.stan")
model <- stan_model("./Stan/glmm_test.stan")
data = list(N = 576, K = 4, D = 2, cov = cov, L = L, g = g0, Ad = Ad)
z0 = optimizing(model, hessian = T, data = dat)
z0$par
u0 = z0$par[paste0("u[", 1:576, "]")]
cor(mdata$AD1, u0)
model
z0$par[1:10]
head(u0, n = 10)
head(mdata$AD1, n = 10)
model <- stan_model("./Stan/glmm.stan")
z1 = optimizing(model, hessian = T, data = dat)
z1$par[1:10]
u1 = z0$par[paste0("u[", 1:576, "]")]
cor(mdata$AD1, u1)
u1 = z1$par[paste0("u[", 1:576, "]")]
cor(mdata$AD1, u1)
Sigma = genPositiveDefMat("eigen",dim = 576, lambdaLow = 0.1)$Sigma
L <- t(chol(Sigma))
data = list(N = 576, K = 4, D = 2, cov = cov, L = L, g = g0, Ad = Ad)
dat
names(dat)
dat$g
Sigma <- kinship[["no_chr19"]]
Sigma[Sigma < 0] <- 0
L <- t(chol(Sigma))
Sr = genPositiveDefMat("eigen",dim = 576, lambdaLow = 0.1)$Sigma
Lr <- t(chol(Sr))
data = list(N = 576, K = 4, D = 2, cov = cov, L = L, g = g0, Ad = Ad)
z1 = optimizing(model, hessian = T, data = data)
u1 = z1$par[paste0("u[", 1:576, "]")]
cor(mdata$AD1, u1)
Sr = genPositiveDefMat("eigen",dim = 576, lambdaLow = 0.1)$Sigma
Lr <- t(chol(Sr))
data = list(N = 576, K = 4, D = 2, cov = cov, L = Lr, g = g0, Ad = Ad)
z2 = optimizing(model, hessian = T, data = data)
u2 = z2$par[paste0("u[", 1:576, "]")]
cor(mdata$AD1, u2)
Lr <- t(chol(Sr / 10))
data = list(N = 576, K = 4, D = 2, cov = cov, L = Lr, g = g0, Ad = Ad)
z2 = optimizing(model, hessian = T, data = data)
u2 = z2$par[paste0("u[", 1:576, "]")]
cor(mdata$AD1, u2)
head(u1)
z1$par[1:20]
head(u1)
mean(u1)
head(u1, 20)
model <- stan_model("./Stan/glmm_test.stan")
model <- stan_model("./Stan/glmm_test.stan")
model <- stan_model("./Stan/glmm_test.stan")
z1 = optimizing(model, hessian = T, data = data)
u1 = z1$par[paste0("z[", 1:576, "]")]
cor(mdata$AD1, u1)
head(u1, n = 20)
head(z1$par)
data
z1$par[1:10]
1e-2
model <- stan_model("./Stan/glmm_test.stan")
z1 = optimizing(model, hessian = T, data = data)
z1$par
u1 = z1$par[paste0("z[", 1:576, "]")]
cor(mdata$AD1, u1)
z1$par[1:10]
model <- stan_model("./Stan/glmm_test.stan")
z1 = optimizing(model, hessian = T, data = data)
u1 = z1$par[paste0("z[", 1:576, "]")]
cor(mdata$AD1, u1)
head(u1)
head(z1$par)
head(z1$par, n = 10)
inde
index
glm.fit$P[index]
glmm.fit$P[index]
dat1 = within(data, { g = g1[index] })
fit1 = optimizing(model, hessian = T, data = dat1)
dat1 = within(data, { g = g1[index, ] })
fit1 = optimizing(model, hessian = T, data = dat1)
sqrt(diag(solve(-fit1$hessian)))["p"]
fit1$par[1:10]
pnorm(0.931883197, sd = 0.185795, lower.tail = F)
pnorm(0.931883197, sd = 0.185795, lower.tail = F) * 2
-log10(pnorm(0.931883197, sd = 0.185795, lower.tail = F) * 2)
glm.fit[index, ]
which.max(glm.fit$P)
index = which.max(glm.fit$P)
glm.fit[index, ]
dat1 = within(data, { g = g1[index, ] })
fit1 = optimizing(model, hessian = T, data = dat1)
pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2
-log10(pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2)
z2 = fit1
z1 = fit1
u1 = z1$par[paste0("z[", 1:576, "]")]
cor(mdata$AD1, u1)
model
fit1$par[1:20]
model <- stan_model("./Stan/glmm_test.stan")
model <- stan_model("./Stan/glmm_test.stan")
data = list(N = 576, K = 4, D = 2, cov = cov, L = L, g = g0, Ad = Ad)
zc = optimizing(model, hessian = T, data = dat); zc$par
zc = optimizing(model, hessian = T, data = data); zc$par
zc = optimizing(model, hessian = T, data = data); zc$par
model
init = list(p = 0, beta = zc$par[paste0("beta[", 1:2, "]")], c = zc$par[paste0("c[", 1:3, "]")], z = zc$par[paste0("z[", 1:576, "]")])
my_optimizing = function(g1) {
N1 <- nrow(g1); vId = rownames(g1);
pId <- c("p", "beta[1]", "beta[2]", "c[1]", "c[2]", "c[3]")
fit <- matrix(nrow = N1, ncol = 7, dimnames = list(vId, c(pId, "se")))
for (i in 1:N1) {
dat1 = within(data, { g = g1[i, ] })
fit1 = optimizing(model, hessian = T, algorithm = "LBFGS", init = init, data = dat1)
se1 = sqrt(diag(solve(-fit1$hessian)))["p"]
fit[i, ] = c(fit1$par[pId], se1)
}
return(fit) }
y <- mclapply(genoList, my_optimizing, mc.cores = n.core)
glmm_test.fit <- fit <- as.data.frame(fit)
head(fit)
pval <- pnorm(abs(fit$p), sd = fit$se, lower.tail = F) * 2
plot(pos, -log10(pval), ylim = c(0, 7.5))
plot(pos, -log10(pval))
index
fit[index, ]
fit <- do.call(rbind, y)
glmm_test.fit <- fit <- as.data.frame(fit)
plot(pos, -log10(pval))
plot(pos, -log10(pval), ylim = c(0, 7.5))
abline(h = 7.3, col = "red")
length(y)
fit <- do.call(rbind, y)
fit = as.data.frame(fit)
pval <- pnorm(abs(fit$p), sd = fit$se, lower.tail = F) * 2
plot(pos, -log10(pval), ylim = c(0, 7.5))
plot(pos, -log10(pval))
model
dat1 = within(data, { g = g1[index, ] })
fit1 = optimizing(model, hessian = T, data = dat1)
se1 = sqrt(diag(solve(-fit1$hessian)))["p"]
fit1$par["p"]
-log10(pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2)
glmm.fit[index, ]
model <- stan_model("./Stan/glmm_test.stan")
dat1 = within(data, { g = g1[index, ] })
fit1 = optimizing(model, hessian = T, data = dat1)
se1 = sqrt(diag(solve(-fit1$hessian)))["p"]
-log10(pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2)
model
cor(glmm.fit$p, glmm_test.fit$p)
cor(glmm.fit$se, glmm_test.fit$se)
L[1:10, 1:10]
-log10(pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2)
L2 = 0.1 * L
diag(L2) = 1
L2[1:10, 1:5]
dat1$L = L2
fit1 = optimizing(model, hessian = T, data = dat1)
se1 = sqrt(diag(solve(-fit1$hessian)))["p"]
-log10(pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2)
glm.fit[index, "P"]
L2 = 0.01 * L
diag(L2) = 1
dat1$L = L2
fit1 = optimizing(model, hessian = T, data = dat1)
se1 = sqrt(diag(solve(-fit1$hessian)))["p"]
-log10(pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2)
Sr = genPositiveDefMat("eigen",dim = 576, lambdaLow = 0.1)$Sigma
Lr <- t(chol(Sr))
data = list(N = 576, K = 4, D = 2, cov = cov, L = Lr, g = g0, Ad = Ad)
z2 = optimizing(model, hessian = T, data = data)
u2 = z2$par[paste0("u[", 1:576, "]")]
cor(mdata$AD1, u2)
u2 = z2$par[paste0("z[", 1:576, "]")]
cor(mdata$AD1, u2)
fit1 = optimizing(model, hessian = T, data = data)
se1 = sqrt(diag(solve(-fit1$hessian)))["p"]
-log10(pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2)
se1
data = list(N = 576, K = 4, D = 2, cov = cov, L = Lr, g = g1[index, ], Ad = Ad)
fit1 = optimizing(model, hessian = T, data = data)
se1 = sqrt(diag(solve(-fit1$hessian)))["p"]
-log10(pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2)
glm.fit[index, ]
fit1$par[1:20]
Sr[1:5, 1:5]
z1 = fit11$par[paste0("z[", 1:576, "]")]
z1 = fit1$par[paste0("z[", 1:576, "]")]
cor(mdata$AD1, z1)
mean(z1)
var(z1)
z1
L2 = 0.1 * L
L2[1:10, 1:5]
dat1 = within(data, { g = g1[index, ] })
dat1$L = L2
fit1 = optimizing(model, hessian = T, data = dat1)
se1 = sqrt(diag(solve(-fit1$hessian)))["p"]
-log10(pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2)
z1 = fit1$par[paste0("z[", 1:576, "]")]
cor(mdata$AD1, z1)
z1
Sigma[1:10, 1:10]
-log10(pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2)
glm.fit[index, ]
which.max(glm.fit$P)
index
which.max(glmm.fit$P)
glm.fit[675, ]
glmm.fit[675, ]
L2 = 0.25 * L
dat1$L = L2
fit1 = optimizing(model, hessian = T, data = dat1)
se1 = sqrt(diag(solve(-fit1$hessian)))["p"]
-log10(pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2)
glm.fit[index, ]
diag(L2) = 1
dat1$L = L2
fit1 = optimizing(model, hessian = T, data = dat1)
se1 = sqrt(diag(solve(-fit1$hessian)))["p"]
-log10(pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2)
L[1:10, 1:4]
model <- stan_model("./Stan/glmm_test2.stan")
Sigma <- kinship[["no_chr19"]]
Sigma[Sigma < 0] <- 0
L <- t(chol(Sigma))
data = list(N = 576, K = 4, D = 2, cov = cov, L = L, g = g0, Ad = Ad)
dat1 = within(data, { g = g1[index, ] })
fit1 = optimizing(model, hessian = T, data = dat1)
se1 = sqrt(diag(solve(-fit1$hessian)))["p"]
-log10(pnorm(fit1$par["p"], sd = se1, lower.tail = F) * 2)
fit1$par[1:20]
z1 = fit1$par[paste0("u[", 1:576, "]")]
cor(mdata$AD1, z1)
glm.fit[index, ]
model
fit1$par[1:10]
data = list(N = 576, K = 4, D = 2, cov = cov, L = L, g = g0, Ad = Ad)
fit0 = optimizing(model, hessian = T, data = data)
u0 = fit0$par[paste0("u[", 1:576, "]")]
cor(mdata$AD1, u0)
fit0$par[1:20]
se0 = sqrt(diag(solve(-fit0$hessian)))["p"]
se0
-log10(pnorm(fit0$par["p"], sd = se0, lower.tail = F) * 2)
u0
summary(u0)
model1
model
data
data$L[1:10, 1:10]
fit0$par[1:20]
fit0 = optimizing(model, hessian = T, data = data)
fit0$par[1:20]
se0 = sqrt(diag(solve(-fit0$hessian)))["p"]
se0
sam0 = sampling(model, data = data)
?sampling
sam0 = sampling(model, data = data, chains = 3, cores = 3, iter = 600, warmup = 200)
print(sam0)
print(sam0, pars = c("sigma"))
print(sam0, pars = c("sigma", "p"))
print(sam0, pars = c("sigma", "p", "c[1]"))
print(sam0, pars = c("sigma", "p", "c[1]", "u[1]"))
print(sam0, pars = c("sigma", "p", "c[1]", "u[2]"))
print(sam0, pars = c("sigma", "p", "c[1]", "u[1]"))
print(sam0, pars = c("sigma", "p", "c[1]", "u[1]", "u[2]"))
head(mdata)
print(sam0, pars = c("sigma", "p", "c[1]", "u[1]", "u[2]", "u[3]"))
print(sam0, pars = c("sigma", "p", "c[1]", "u[1]", "u[2]", "u[3]", "z[1]"))
print(sam0, pars = c("sigma", "p", "c[1]", "u[1]", "u[2]", "u[3]", "z[1]", "z[2]"))
print(sam0, pars = c("sigma", "p", "c[1]", "u[1]", "u[2]", "u[3]", "z[1]", "z[2]", "z[3]"))
print(sim0, pars = c("c[1]", "c[2]", "c[3]"))
print(sam0, pars = c("c[1]", "c[2]", "c[3]"))
plot(sam0, pars = c("c[1]", "c[2]", "c[3]"))
plot(sam0, pars = c("c[1]", "c[2]", "c[3]", "p"))
plot(sam0, pars = c("c[1]", "c[2]", "c[3]", "p", "sigma"))
plot(sam0, pars = c("c[1]", "c[2]", "c[3]", "p", "sigma", "u[1]"))
plot(sam0, pars = c("c[1]", "c[2]", "c[3]", "p", "sigma", "u[1]", "u[2]"))
library(ape)
library(amap)
library(ggplot2)
library(lattice)
library(ggdendro)
library(grid)
library(xtable)
library(xlsx)
rm(list = ls())
source("~/Dropbox/GitHub/X/function.R")
setwd("~/Dropbox/GitHub/Il21")
load("./data/myTpm.rdt")
load("data/profile12.rdt")
sapply(profile1, length)
scatter <- myTpm[apply(myTpm, 1, function(x) max(x) > 5), ]
scatter <- log2(scatter + 1)
scatter <- data.frame("NN" = rowMeans(scatter[1:2]), "NP" = rowMeans(scatter[3:4]), "PP" = rowMeans(scatter[5:6]))
scatter$NP.NN <- scatter$NP - scatter$NN
scatter$PP.NN <- scatter$PP - scatter$NN
scatter$group <- rep("None", nrow(scatter))
scatter$group[rownames(scatter) %in% profile1[[1]]] <- "N"
scatter$group[rownames(scatter) %in% profile1[[2]]] <- "ACT"
scatter$group[rownames(scatter) %in% profile1[[3]]] <- "ACT IL21"
head(scatter)
scatter1 <- scatter[scatter$group == "None", ]
scatter2 <- scatter[! scatter$group == "None", ]
scatter2$group <- factor(scatter2$group, levels = c("N", "ACT", "ACT IL21"))
myLabel <- rownames(scatter)
ggplot() +
geom_point(data = scatter1, aes(x = NP.NN, y = PP.NN), color = "grey70", shape = 4, size = 1.5) +
geom_point(data = scatter2, aes(x = NP.NN, y = PP.NN, color = group, shape = group), size = 1.5) +
theme_bw() + xlab("ACT vs N") + ylab("ACT IL21 vs N") +
scale_color_manual(values = c("darkorchid2", "chartreuse3", "dodgerblue3")) +
theme(panel.border = element_blank(),
axis.line = element_line(size = 0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 12, face = "bold"),
legend.key = element_blank()) +
geom_point(data = myLabel, aes(x = NP.NN, y = PP.NN), shape = 2, size = 3, color = "red") +
geom_text(data = myLabel, aes(x = NP.NN, y = PP.NN, label = rownames(myLabel)),
color = "black", size = 3, vjust = -1.0)
library(ggplot2)
ggplot() +
geom_point(data = scatter1, aes(x = NP.NN, y = PP.NN), color = "grey70", shape = 4, size = 1.5) +
geom_point(data = scatter2, aes(x = NP.NN, y = PP.NN, color = group, shape = group), size = 1.5) +
theme_bw() + xlab("ACT vs N") + ylab("ACT IL21 vs N") +
scale_color_manual(values = c("darkorchid2", "chartreuse3", "dodgerblue3")) +
theme(panel.border = element_blank(),
axis.line = element_line(size = 0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 12, face = "bold"),
legend.key = element_blank()) +
geom_point(data = myLabel, aes(x = NP.NN, y = PP.NN), shape = 2, size = 3, color = "red") +
geom_text(data = myLabel, aes(x = NP.NN, y = PP.NN, label = rownames(myLabel)),
color = "black", size = 3, vjust = -1.0)
pdf("Results/scatterplot_text2.pdf", width = 5, height = 4)
ggplot() +
geom_point(data = scatter1, aes(x = NP.NN, y = PP.NN), color = "grey70", shape = 4, size = 1.5) +
geom_point(data = scatter2, aes(x = NP.NN, y = PP.NN, color = group, shape = group), size = 1.5) +
theme_bw() + xlab("ACT vs N") + ylab("ACT IL21 vs N") +
scale_color_manual(values = c("darkorchid2", "chartreuse3", "dodgerblue3")) +
theme(panel.border = element_blank(),
axis.line = element_line(size = 0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 12, face = "bold"),
legend.key = element_blank()) +
geom_point(data = myLabel, aes(x = NP.NN, y = PP.NN), shape = 2, size = 3, color = "red") +
geom_text(data = myLabel, aes(x = NP.NN, y = PP.NN, label = rownames(myLabel)),
color = "black", size = 3, vjust = -1.0)
dev.off()
myLabel <- scatter
ggplot() +
geom_point(data = scatter1, aes(x = NP.NN, y = PP.NN), color = "grey70", shape = 4, size = 1.5) +
geom_point(data = scatter2, aes(x = NP.NN, y = PP.NN, color = group, shape = group), size = 1.5) +
theme_bw() + xlab("ACT vs N") + ylab("ACT IL21 vs N") +
scale_color_manual(values = c("darkorchid2", "chartreuse3", "dodgerblue3")) +
theme(panel.border = element_blank(),
axis.line = element_line(size = 0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 12, face = "bold"),
legend.key = element_blank()) +
geom_point(data = myLabel, aes(x = NP.NN, y = PP.NN), shape = 2, size = 3, color = "red") +
geom_text(data = myLabel, aes(x = NP.NN, y = PP.NN, label = rownames(myLabel)),
color = "black", size = 3, vjust = -1.0)
pdf("Results/scatterplot_text2.pdf", width = 5, height = 4)
ggplot() +
geom_point(data = scatter1, aes(x = NP.NN, y = PP.NN), color = "grey70", shape = 4, size = 1.5) +
geom_point(data = scatter2, aes(x = NP.NN, y = PP.NN, color = group, shape = group), size = 1.5) +
theme_bw() + xlab("ACT vs N") + ylab("ACT IL21 vs N") +
scale_color_manual(values = c("darkorchid2", "chartreuse3", "dodgerblue3")) +
theme(panel.border = element_blank(),
axis.line = element_line(size = 0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 12, face = "bold"),
legend.key = element_blank()) +
geom_point(data = myLabel, aes(x = NP.NN, y = PP.NN), shape = 2, size = 3, color = "red") +
geom_text(data = myLabel, aes(x = NP.NN, y = PP.NN, label = rownames(myLabel)),
color = "black", size = 3, vjust = -1.0)
dev.off()
pdf("Results/scatterplot_text2.pdf", width = 5, height = 4)
ggplot() +
geom_point(data = scatter1, aes(x = NP.NN, y = PP.NN), color = "grey70", shape = 4, size = 1.5) +
geom_point(data = scatter2, aes(x = NP.NN, y = PP.NN, color = group, shape = group), size = 1.5) +
theme_bw() + xlab("ACT vs N") + ylab("ACT IL21 vs N") +
scale_color_manual(values = c("darkorchid2", "chartreuse3", "dodgerblue3")) +
theme(panel.border = element_blank(),
axis.line = element_line(size = 0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 12, face = "bold"),
legend.key = element_blank()) +
geom_point(data = myLabel, aes(x = NP.NN, y = PP.NN), shape = 2, size = 3, color = "red") +
geom_text(data = myLabel, aes(x = NP.NN, y = PP.NN, label = rownames(myLabel)),
color = "black", size = 1, vjust = -1.0)
dev.off()
myLabel <- scatter2
pdf("Results/scatterplot_text2.pdf", width = 5, height = 4)
ggplot() +
geom_point(data = scatter1, aes(x = NP.NN, y = PP.NN), color = "grey70", shape = 4, size = 1.5) +
geom_point(data = scatter2, aes(x = NP.NN, y = PP.NN, color = group, shape = group), size = 1.5) +
theme_bw() + xlab("ACT vs N") + ylab("ACT IL21 vs N") +
scale_color_manual(values = c("darkorchid2", "chartreuse3", "dodgerblue3")) +
theme(panel.border = element_blank(),
axis.line = element_line(size = 0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 12, face = "bold"),
legend.key = element_blank()) +
geom_point(data = myLabel, aes(x = NP.NN, y = PP.NN), shape = 2, size = 3, color = "red") +
geom_text(data = myLabel, aes(x = NP.NN, y = PP.NN, label = rownames(myLabel)),
color = "black", size = 3, vjust = -1.0)
dev.off()
pdf("Results/scatterplot_text2.pdf", width = 5, height = 4)
ggplot() +
geom_point(data = scatter1, aes(x = NP.NN, y = PP.NN), color = "grey70", shape = 4, size = 1.5) +
geom_point(data = scatter2, aes(x = NP.NN, y = PP.NN, color = group, shape = group), size = 1.5) +
theme_bw() + xlab("ACT vs N") + ylab("ACT IL21 vs N") +
scale_color_manual(values = c("darkorchid2", "chartreuse3", "dodgerblue3")) +
theme(panel.border = element_blank(),
axis.line = element_line(size = 0.5),
axis.text = element_text(size = 10, face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = 12, face = "bold"),
legend.key = element_blank()) +
geom_point(data = myLabel, aes(x = NP.NN, y = PP.NN), shape = 2, size = 3, color = "red") +
geom_text(data = myLabel, aes(x = NP.NN, y = PP.NN, label = rownames(myLabel)),
color = "black", size = 2, vjust = -1.0)
dev.off()
